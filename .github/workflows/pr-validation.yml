name: Pull Request Validation

on:
  pull_request:
    types: [ opened, synchronize, reopened ]

jobs:
  validate:
    name: Validate PR
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Get dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Build
        run: go build -v ./...

      - name: Check format
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Code is not formatted properly. Please run 'gofmt -s -w .' and commit the changes."
            gofmt -s -l .
            exit 1
          fi

      - name: Check commit messages
        run: |
          # Ensure that commit messages follow conventional commits format
          invalid_commits=$(git log --format=%B origin/${GITHUB_BASE_REF}..HEAD | grep -v -E "^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\(.+\))?: .+$" | grep -v "^$" | wc -l)
          if [ "$invalid_commits" -gt 0 ]; then
            echo "Some commit messages don't follow conventional commits format."
            echo "Please format your commit messages as: <type>[(scope)]: <description>"
            echo "Examples: feat(api): add user endpoint, fix: handle null values"
            git log --format=%B origin/${GITHUB_BASE_REF}..HEAD
            exit 1
          fi
